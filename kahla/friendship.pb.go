// Code generated by go-rest-client. DO NOT EDIT.
// source: friendship.proto
package kahla

import (
	"encoding/json"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

type Friendship_MineResponse struct {
	Code    int32                           `json:"code,omitempty"`
	Message string                          `json:"message,omitempty"`
	Users   []Friendship_MineResponse_User  `json:"users,omitempty"`
	Groups  []Friendship_MineResponse_Group `json:"groups,omitempty"`
}
type Friendship_MineResponse_User struct {
	MakeEmailPublic   bool   `json:"makeEmailPublic,omitempty"`
	Email             string `json:"email,omitempty"`
	Id                string `json:"id,omitempty"`
	Bio               string `json:"bio,omitempty"`
	NickName          string `json:"nickName,omitempty"`
	Sex               string `json:"sex,omitempty"`
	HeadImgFileKey    uint32 `json:"headImgFileKey,omitempty"`
	PreferedLanguage  string `json:"preferedLanguage,omitempty"`
	AccountCreateTime string `json:"accountCreateTime,omitempty"`
	EmailConfirmed    bool   `json:"emailConfirmed,omitempty"`
}

type Friendship_MineResponse_Group struct {
	ImageKey               uint32 `json:"imageKey,omitempty"`
	Name                   string `json:"name,omitempty"`
	HasPassword            bool   `json:"hasPassword,omitempty"`
	OwnerId                string `json:"ownerId,omitempty"`
	Id                     uint32 `json:"id,omitempty"`
	HasTimer               bool   `json:"hasTimer,omitempty"`
	ConversationCreateTime string `json:"conversationCreateTime,omitempty"`
}

type Friendship_DeleteFriendRequest struct {
	Id string `json:"id,omitempty"`
}

type Friendship_DeleteFriendResponse struct {
	Code    int32  `json:"code,omitempty"`
	Message string `json:"message,omitempty"`
}

type Friendship_CreateRequestRequest struct {
	Id string `json:"id,omitempty"`
}

type Friendship_CreateRequestResponse struct {
	Code    int32  `json:"code,omitempty"`
	Message string `json:"message,omitempty"`
	Value   uint32 `json:"value,omitempty"`
}

type Friendship_CompleteRequestRequest struct {
	Id     string `json:"Id,omitempty"`
	Accept bool   `json:"Accept,omitempty"`
}

type Friendship_CompleteRequestResponse struct {
	Code    int32  `json:"code,omitempty"`
	Message string `json:"message,omitempty"`
}

type Friendship_MyRequestsResponse struct {
	Code    int32                                `json:"code,omitempty"`
	Message string                               `json:"message,omitempty"`
	Items   []Friendship_MyRequestsResponse_Item `json:"items,omitempty"`
}
type Friendship_MyRequestsResponse_Item struct {
	Id         uint32                                     `json:"id,omitempty"`
	CreatorId  string                                     `json:"creatorId,omitempty"`
	Creator    Friendship_MyRequestsResponse_Item_Creator `json:"creator,omitempty"`
	TargetId   string                                     `json:"targetId,omitempty"`
	CreateTime string                                     `json:"createTime,omitempty"`
	Completed  bool                                       `json:"completed,omitempty"`
}
type Friendship_MyRequestsResponse_Item_Creator struct {
	MakeEmailPublic   bool   `json:"makeEmailPublic,omitempty"`
	Email             string `json:"email,omitempty"`
	Id                string `json:"id,omitempty"`
	Bio               string `json:"bio,omitempty"`
	NickName          string `json:"nickName,omitempty"`
	Sex               string `json:"sex,omitempty"`
	HeadImgFileKey    uint32 `json:"headImgFileKey,omitempty"`
	PreferedLanguage  string `json:"preferedLanguage,omitempty"`
	AccountCreateTime string `json:"accountCreateTime,omitempty"`
	EmailConfirmed    bool   `json:"emailConfirmed,omitempty"`
}

type Friendship_SearchEverythingRequest struct {
	SearchInput string `json:"SearchInput,omitempty"`
	Take        uint32 `json:"Take,omitempty"`
}

type Friendship_SearchEverythingResponse struct {
	Code        int32                                       `json:"code,omitempty"`
	Message     string                                      `json:"message,omitempty"`
	UsersCount  uint32                                      `json:"usersCount,omitempty"`
	GroupsCount uint32                                      `json:"groupsCount,omitempty"`
	Users       []Friendship_SearchEverythingResponse_User  `json:"users,omitempty"`
	Groups      []Friendship_SearchEverythingResponse_Group `json:"groups,omitempty"`
}
type Friendship_SearchEverythingResponse_User struct {
	MakeEmailPublic   bool   `json:"makeEmailPublic,omitempty"`
	Email             string `json:"email,omitempty"`
	Id                string `json:"id,omitempty"`
	Bio               string `json:"bio,omitempty"`
	NickName          string `json:"nickName,omitempty"`
	Sex               string `json:"sex,omitempty"`
	HeadImgFileKey    uint32 `json:"headImgFileKey,omitempty"`
	PreferedLanguage  string `json:"preferedLanguage,omitempty"`
	AccountCreateTime string `json:"accountCreateTime,omitempty"`
	EmailConfirmed    bool   `json:"emailConfirmed,omitempty"`
}

type Friendship_SearchEverythingResponse_Group struct {
	ImageKey               uint32 `json:"imageKey,omitempty"`
	Name                   string `json:"name,omitempty"`
	HasPassword            bool   `json:"hasPassword,omitempty"`
	OwnerId                string `json:"ownerId,omitempty"`
	Id                     uint32 `json:"id,omitempty"`
	HasTimer               bool   `json:"hasTimer,omitempty"`
	ConversationCreateTime string `json:"conversationCreateTime,omitempty"`
}

type Friendship_DiscoverFriendsRequest struct {
	Take uint32 `json:"take,omitempty"`
}

type Friendship_DiscoverFriendsResponse struct {
	Code    int32                                     `json:"code,omitempty"`
	Message string                                    `json:"message,omitempty"`
	Items   []Friendship_DiscoverFriendsResponse_Item `json:"items,omitempty"`
}
type Friendship_DiscoverFriendsResponse_Item struct {
	CommonFriends uint32                                             `json:"commonFriends,omitempty"`
	CommonGroups  uint32                                             `json:"commonGroups,omitempty"`
	SentRequest   bool                                               `json:"sentRequest,omitempty"`
	TargetUser    Friendship_DiscoverFriendsResponse_Item_TargetUser `json:"targetUser,omitempty"`
}
type Friendship_DiscoverFriendsResponse_Item_TargetUser struct {
	MakeEmailPublic   bool   `json:"makeEmailPublic,omitempty"`
	Email             string `json:"email,omitempty"`
	Id                string `json:"id,omitempty"`
	Bio               string `json:"bio,omitempty"`
	NickName          string `json:"nickName,omitempty"`
	Sex               string `json:"sex,omitempty"`
	HeadImgFileKey    uint32 `json:"headImgFileKey,omitempty"`
	PreferedLanguage  string `json:"preferedLanguage,omitempty"`
	AccountCreateTime string `json:"accountCreateTime,omitempty"`
	EmailConfirmed    bool   `json:"emailConfirmed,omitempty"`
}

type Friendship_UserDetailRequest struct {
	Id string `json:"id,omitempty"`
}

type Friendship_UserDetailResponse struct {
	Code           int32                                        `json:"code,omitempty"`
	Message        string                                       `json:"message,omitempty"`
	User           Friendship_UserDetailResponse_User           `json:"user,omitempty"`
	AreFriends     bool                                         `json:"areFriends,omitempty"`
	SentRequest    bool                                         `json:"sentRequest,omitempty"`
	PendingRequest Friendship_UserDetailResponse_PendingRequest `json:"pendingRequest,omitempty"`
	ConversationId uint32                                       `json:"conversationId,omitempty"`
}
type Friendship_UserDetailResponse_User struct {
	MakeEmailPublic   bool   `json:"makeEmailPublic,omitempty"`
	Email             string `json:"email,omitempty"`
	Id                string `json:"id,omitempty"`
	Bio               string `json:"bio,omitempty"`
	NickName          string `json:"nickName,omitempty"`
	Sex               string `json:"sex,omitempty"`
	HeadImgFileKey    uint32 `json:"headImgFileKey,omitempty"`
	PreferedLanguage  string `json:"preferedLanguage,omitempty"`
	AccountCreateTime string `json:"accountCreateTime,omitempty"`
	EmailConfirmed    bool   `json:"emailConfirmed,omitempty"`
}

type Friendship_UserDetailResponse_PendingRequest struct {
	Id         uint32                                               `json:"id,omitempty"`
	CreatorId  string                                               `json:"creatorId,omitempty"`
	Creator    Friendship_UserDetailResponse_PendingRequest_Creator `json:"creator,omitempty"`
	TargetId   string                                               `json:"targetId,omitempty"`
	CreateTime string                                               `json:"createTime,omitempty"`
	Completed  bool                                                 `json:"completed,omitempty"`
}
type Friendship_UserDetailResponse_PendingRequest_Creator struct {
	MakeEmailPublic   bool   `json:"makeEmailPublic,omitempty"`
	Email             string `json:"email,omitempty"`
	Id                string `json:"id,omitempty"`
	Bio               string `json:"bio,omitempty"`
	NickName          string `json:"nickName,omitempty"`
	Sex               string `json:"sex,omitempty"`
	HeadImgFileKey    uint32 `json:"headImgFileKey,omitempty"`
	PreferedLanguage  string `json:"preferedLanguage,omitempty"`
	AccountCreateTime string `json:"accountCreateTime,omitempty"`
	EmailConfirmed    bool   `json:"emailConfirmed,omitempty"`
}

type Friendship_ReportHimRequest struct {
	TargetUserId string `json:"TargetUserId,omitempty"`
	Reason       string `json:"Reason,omitempty"`
}

type Friendship_ReportHimResponse struct {
	Code    int32  `json:"code,omitempty"`
	Message string `json:"message,omitempty"`
}

type FriendshipService struct {
	client  *http.Client
	baseUrl string
}

func NewFriendshipService(client *http.Client, baseUrl string) *FriendshipService {
	return &FriendshipService{
		client:  client,
		baseUrl: baseUrl,
	}
}

func (s *FriendshipService) Mine() (out *Friendship_MineResponse, resp *http.Response, err error) {
	req, err := http.NewRequest("GET", s.baseUrl+"/Friendship/Mine", nil)
	if err != nil {
		return
	}
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Friendship_MineResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *FriendshipService) DeleteFriend(in *Friendship_DeleteFriendRequest) (out *Friendship_DeleteFriendResponse, resp *http.Response, err error) {
	v := url.Values{}
	v.Add("id", in.Id)
	req, err := http.NewRequest("POST", s.baseUrl+"/Friendship/DeleteFriend", strings.NewReader(v.Encode()))
	if err != nil {
		return
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Friendship_DeleteFriendResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *FriendshipService) CreateRequest(in *Friendship_CreateRequestRequest) (out *Friendship_CreateRequestResponse, resp *http.Response, err error) {
	v := url.Values{}
	v.Add("id", in.Id)
	req, err := http.NewRequest("POST", s.baseUrl+"/Friendship/CreateRequest", strings.NewReader(v.Encode()))
	if err != nil {
		return
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Friendship_CreateRequestResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *FriendshipService) CompleteRequest(in *Friendship_CompleteRequestRequest) (out *Friendship_CompleteRequestResponse, resp *http.Response, err error) {
	v := url.Values{}
	v.Add("Id", in.Id)
	v.Add("Accept", strconv.FormatBool(in.Accept))
	req, err := http.NewRequest("POST", s.baseUrl+"/Friendship/CompleteRequest", strings.NewReader(v.Encode()))
	if err != nil {
		return
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Friendship_CompleteRequestResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *FriendshipService) MyRequests() (out *Friendship_MyRequestsResponse, resp *http.Response, err error) {
	req, err := http.NewRequest("GET", s.baseUrl+"/Friendship/MyRequests", nil)
	if err != nil {
		return
	}
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Friendship_MyRequestsResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *FriendshipService) SearchEverything(in *Friendship_SearchEverythingRequest) (out *Friendship_SearchEverythingResponse, resp *http.Response, err error) {
	v := url.Values{}
	v.Add("SearchInput", in.SearchInput)
	v.Add("Take", strconv.FormatUint(uint64(in.Take), 10))
	req, err := http.NewRequest("GET", s.baseUrl+"/Friendship/SearchEverything?"+v.Encode(), nil)
	if err != nil {
		return
	}
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Friendship_SearchEverythingResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *FriendshipService) DiscoverFriends(in *Friendship_DiscoverFriendsRequest) (out *Friendship_DiscoverFriendsResponse, resp *http.Response, err error) {
	v := url.Values{}
	v.Add("take", strconv.FormatUint(uint64(in.Take), 10))
	req, err := http.NewRequest("GET", s.baseUrl+"/Friendship/DiscoverFriends?"+v.Encode(), nil)
	if err != nil {
		return
	}
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Friendship_DiscoverFriendsResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *FriendshipService) UserDetail(in *Friendship_UserDetailRequest) (out *Friendship_UserDetailResponse, resp *http.Response, err error) {
	v := url.Values{}
	v.Add("id", in.Id)
	req, err := http.NewRequest("GET", s.baseUrl+"/Friendship/UserDetail?"+v.Encode(), nil)
	if err != nil {
		return
	}
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Friendship_UserDetailResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *FriendshipService) ReportHim(in *Friendship_ReportHimRequest) (out *Friendship_ReportHimResponse, resp *http.Response, err error) {
	v := url.Values{}
	v.Add("TargetUserId", in.TargetUserId)
	v.Add("Reason", in.Reason)
	req, err := http.NewRequest("POST", s.baseUrl+"/Friendship/ReportHim", strings.NewReader(v.Encode()))
	if err != nil {
		return
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Friendship_ReportHimResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}
