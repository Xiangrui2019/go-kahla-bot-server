// Code generated by go-rest-client. DO NOT EDIT.
// source: files.proto
package kahla

import (
	"bytes"
	"encoding/json"
	"io"
	"mime/multipart"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

type Files_UploadIconRequest struct {
	File multipart.File `json:"File,omitempty"`
	Name string `json:"Name,omitempty"`
}

type Files_UploadIconResponse struct {
	Code         int32  `json:"code,omitempty"`
	Message      string `json:"message,omitempty"`
	FileKey      uint32 `json:"fileKey,omitempty"`
	DownloadPath string `json:"downloadPath,omitempty"`
}

type Files_UploadMediaRequest struct {
	File multipart.File `json:"File,omitempty"`
	Name string `json:"Name,omitempty"`
}

type Files_UploadMediaResponse struct {
	Code         int32  `json:"code,omitempty"`
	Message      string `json:"message,omitempty"`
	FileKey      string `json:"fileKey,omitempty"`
	DownloadPath string `json:"downloadPath,omitempty"`
}

type Files_UploadFileRequest struct {
	ConversationId uint32      `json:"ConversationId,omitempty"`
	File           multipart.File `json:"File,omitempty"`
	Name           string `json:"Name,omitempty"`
}

type Files_UploadFileResponse struct {
	Code          int32  `json:"code,omitempty"`
	Message       string `json:"message,omitempty"`
	SavedFileName string `json:"savedFileName,omitempty"`
	FileKey       uint32 `json:"fileKey,omitempty"`
	FileSize      uint64 `json:"fileSize,omitempty"`
}

type Files_FileDownloadAddressRequest struct {
	FileKey uint32 `json:"FileKey,omitempty"`
}

type Files_FileDownloadAddressResponse struct {
	Code         int32  `json:"code,omitempty"`
	Message      string `json:"message,omitempty"`
	FileName     string `json:"fileName,omitempty"`
	DownloadPath string `json:"downloadPath,omitempty"`
}

type FilesService struct {
	client  *http.Client
	baseUrl string
}

func NewFilesService(client *http.Client, baseUrl string) *FilesService {
	return &FilesService{
		client:  client,
		baseUrl: baseUrl,
	}
}

func (s *FilesService) UploadIcon(in *Files_UploadIconRequest) (out *Files_UploadIconResponse, resp *http.Response, err error) {
	var b bytes.Buffer
	w := multipart.NewWriter(&b)
	file := in.File
	writerFile, err := w.CreateFormFile("File", in.Name)
	if err != nil {
		return nil, nil, err
	}
	_, err = io.Copy(writerFile, file)
	if err != nil {
		return nil, nil, err
	}
	w.Close()
	req, err := http.NewRequest("POST", s.baseUrl+"/Files/UploadIcon", &b)
	if err != nil {
		return
	}
	req.Header.Set("Content-Type", w.FormDataContentType())
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Files_UploadIconResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *FilesService) UploadMedia(in *Files_UploadMediaRequest) (out *Files_UploadMediaResponse, resp *http.Response, err error) {
	var b bytes.Buffer
	w := multipart.NewWriter(&b)
	file := in.File
	writerFile, err := w.CreateFormFile("File", in.Name)
	if err != nil {
		return nil, nil, err
	}
	_, err = io.Copy(writerFile, file)
	if err != nil {
		return nil, nil, err
	}
	w.Close()
	req, err := http.NewRequest("POST", s.baseUrl+"/Files/UploadMedia", &b)
	if err != nil {
		return
	}
	req.Header.Set("Content-Type", w.FormDataContentType())
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Files_UploadMediaResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *FilesService) UploadFile(in *Files_UploadFileRequest) (out *Files_UploadFileResponse, resp *http.Response, err error) {
	v := url.Values{}
	v.Add("ConversationId", strconv.FormatUint(uint64(in.ConversationId), 10))
	var b bytes.Buffer
	w := multipart.NewWriter(&b)
	if err != nil {
		return nil, nil, err
	}
	file := in.File
	writerFile, err := w.CreateFormFile("File", in.Name)
	if err != nil {
		return nil, nil, err
	}
	_, err = io.Copy(writerFile, file)
	if err != nil {
		return nil, nil, err
	}
	w.Close()
	req, err := http.NewRequest("POST", s.baseUrl+"/Files/UploadFile?"+v.Encode(), &b)
	if err != nil {
		return
	}
	req.Header.Set("Content-Type", w.FormDataContentType())
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Files_UploadFileResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *FilesService) FileDownloadAddress(in *Files_FileDownloadAddressRequest) (out *Files_FileDownloadAddressResponse, resp *http.Response, err error) {
	v := url.Values{}
	v.Add("FileKey", strconv.FormatUint(uint64(in.FileKey), 10))
	req, err := http.NewRequest("POST", s.baseUrl+"/Files/FileDownloadAddress", strings.NewReader(v.Encode()))
	if err != nil {
		return
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Files_FileDownloadAddressResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}
