// Code generated by go-rest-client. DO NOT EDIT.
// source: conversation.proto
package kahla

import (
	"encoding/json"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

type Conversation_Discriminator int32

const (
	Conversation_Discriminator_PrivateConversation int32 = 0
	Conversation_Discriminator_GroupConversation   int32 = 1
)

var Conversation_Discriminator_name = map[int32]string{
	0: "PrivateConversation",
	1: "GroupConversation",
}
var Conversation_Discriminator_value = map[string]int32{
	"PrivateConversation": 0,
	"GroupConversation":   1,
}

type Conversation_AllRequest struct {
	Take uint32 `json:"Take,omitempty"`
	Skip uint32 `json:"Skip,omitempty"`
}

type Conversation_AllResponse struct {
	Code    int32                           `json:"code,omitempty"`
	Message string                          `json:"message,omitempty"`
	Items   []Conversation_AllResponse_Item `json:"items,omitempty"`
}
type Conversation_AllResponse_Item struct {
	DisplayName       string `json:"displayName,omitempty"`
	DisplayImageKey   uint32 `json:"displayImageKey,omitempty"`
	LatestMessage     string `json:"latestMessage,omitempty"`
	LatestMessageTime string `json:"latestMessageTime,omitempty"`
	UnReadAmount      uint32 `json:"unReadAmount,omitempty"`
	ConversationId    uint32 `json:"conversationId,omitempty"`
	Discriminator     string `json:"discriminator,omitempty"`
	UserId            string `json:"userId,omitempty"`
	AesKey            string `json:"aesKey,omitempty"`
	Muted             bool   `json:"muted,omitempty"`
	SomeoneAtMe       bool   `json:"someoneAtMe,omitempty"`
}

type Conversation_GetMessageRequest struct {
	Id       uint32 `json:"id,omitempty"`
	SkipTill int32  `json:"skipTill,omitempty"`
	Take     uint32 `json:"take,omitempty"`
}

type Conversation_GetMessageResponse struct {
	Code    int32                                  `json:"code,omitempty"`
	Message string                                 `json:"message,omitempty"`
	Items   []Conversation_GetMessageResponse_Item `json:"items,omitempty"`
}
type Conversation_GetMessageResponse_Item struct {
	Id             uint32                                      `json:"id,omitempty"`
	ConversationId uint32                                      `json:"conversationId,omitempty"`
	Ats            []Conversation_GetMessageResponse_Item_At   `json:"ats,omitempty"`
	SenderId       string                                      `json:"senderId,omitempty"`
	Sender         Conversation_GetMessageResponse_Item_Sender `json:"sender,omitempty"`
	SendTime       string                                      `json:"sendTime,omitempty"`
	Content        string                                      `json:"content,omitempty"`
	Read           bool                                        `json:"read,omitempty"`
}
type Conversation_GetMessageResponse_Item_At struct {
	TargetUserId string `json:"targetUserId,omitempty"`
}

type Conversation_GetMessageResponse_Item_Sender struct {
	MakeEmailPublic   bool   `json:"makeEmailPublic,omitempty"`
	Email             string `json:"email,omitempty"`
	Id                string `json:"id,omitempty"`
	Bio               string `json:"bio,omitempty"`
	NickName          string `json:"nickName,omitempty"`
	Sex               string `json:"sex,omitempty"`
	HeadImgFileKey    uint32 `json:"headImgFileKey,omitempty"`
	PreferedLanguage  string `json:"preferedLanguage,omitempty"`
	AccountCreateTime string `json:"accountCreateTime,omitempty"`
	EmailConfirmed    bool   `json:"emailConfirmed,omitempty"`
}

type Conversation_SendMessageRequest struct {
	Id      uint32   `json:"Id,omitempty"`
	Content string   `json:"Content,omitempty"`
	At      []string `json:"At,omitempty"`
}

type Conversation_SendMessageResponse struct {
	Code    int32  `json:"code,omitempty"`
	Message string `json:"message,omitempty"`
}

type Conversation_ConversationDetailRequest struct {
	Id uint32 `json:"id,omitempty"`
}

type Conversation_ConversationDetailResponse struct {
	Code    int32                                         `json:"code,omitempty"`
	Message string                                        `json:"message,omitempty"`
	Value   Conversation_ConversationDetailResponse_Value `json:"value,omitempty"`
}
type Conversation_ConversationDetailResponse_Value struct {
	Users                  []Conversation_ConversationDetailResponse_Value_User      `json:"users,omitempty"`
	GroupImageKey          uint32                                                    `json:"groupImageKey,omitempty"`
	GroupName              string                                                    `json:"groupName,omitempty"`
	HasPassword            bool                                                      `json:"hasPassword,omitempty"`
	OwnerId                string                                                    `json:"ownerId,omitempty"`
	RequesterId            string                                                    `json:"requesterId,omitempty"`
	RequestUser            Conversation_ConversationDetailResponse_Value_RequestUser `json:"requestUser,omitempty"`
	TargetId               string                                                    `json:"targetId,omitempty"`
	TargetUser             Conversation_ConversationDetailResponse_Value_TargetUser  `json:"targetUser,omitempty"`
	AnotherUserId          string                                                    `json:"anotherUserId,omitempty"`
	Id                     uint32                                                    `json:"id,omitempty"`
	Discriminator          string                                                    `json:"discriminator,omitempty"`
	AesKey                 string                                                    `json:"aesKey,omitempty"`
	MaxLiveSeconds         uint32                                                    `json:"maxLiveSeconds,omitempty"`
	ConversationCreateTime string                                                    `json:"conversationCreateTime,omitempty"`
	DisplayName            string                                                    `json:"displayName,omitempty"`
	DisplayImage           uint32                                                    `json:"displayImage,omitempty"`
}
type Conversation_ConversationDetailResponse_Value_User struct {
	Id            uint32                                                  `json:"id,omitempty"`
	JoinTime      string                                                  `json:"joinTime,omitempty"`
	Muted         bool                                                    `json:"muted,omitempty"`
	User          Conversation_ConversationDetailResponse_Value_User_User `json:"user,omitempty"`
	GroupId       uint32                                                  `json:"groupId,omitempty"`
	ReadTimeStamp string                                                  `json:"readTimeStamp,omitempty"`
}
type Conversation_ConversationDetailResponse_Value_User_User struct {
	MakeEmailPublic   bool   `json:"makeEmailPublic,omitempty"`
	Email             string `json:"email,omitempty"`
	Id                string `json:"id,omitempty"`
	Bio               string `json:"bio,omitempty"`
	NickName          string `json:"nickName,omitempty"`
	Sex               string `json:"sex,omitempty"`
	HeadImgFileKey    uint32 `json:"headImgFileKey,omitempty"`
	PreferedLanguage  string `json:"preferedLanguage,omitempty"`
	AccountCreateTime string `json:"accountCreateTime,omitempty"`
	EmailConfirmed    bool   `json:"emailConfirmed,omitempty"`
}

type Conversation_ConversationDetailResponse_Value_RequestUser struct {
	MakeEmailPublic   bool   `json:"makeEmailPublic,omitempty"`
	Email             string `json:"email,omitempty"`
	Id                string `json:"id,omitempty"`
	Bio               string `json:"bio,omitempty"`
	NickName          string `json:"nickName,omitempty"`
	Sex               string `json:"sex,omitempty"`
	HeadImgFileKey    uint32 `json:"headImgFileKey,omitempty"`
	PreferedLanguage  string `json:"preferedLanguage,omitempty"`
	AccountCreateTime string `json:"accountCreateTime,omitempty"`
	EmailConfirmed    bool   `json:"emailConfirmed,omitempty"`
}

type Conversation_ConversationDetailResponse_Value_TargetUser struct {
	MakeEmailPublic   bool   `json:"makeEmailPublic,omitempty"`
	Email             string `json:"email,omitempty"`
	Id                string `json:"id,omitempty"`
	Bio               string `json:"bio,omitempty"`
	NickName          string `json:"nickName,omitempty"`
	Sex               string `json:"sex,omitempty"`
	HeadImgFileKey    uint32 `json:"headImgFileKey,omitempty"`
	PreferedLanguage  string `json:"preferedLanguage,omitempty"`
	AccountCreateTime string `json:"accountCreateTime,omitempty"`
	EmailConfirmed    bool   `json:"emailConfirmed,omitempty"`
}

type Conversation_UpdateMessageLifeTimeRequest struct {
	Id          uint32 `json:"Id,omitempty"`
	NewLifeTime uint32 `json:"NewLifeTime,omitempty"`
}

type Conversation_UpdateMessageLifeTimeResponse struct {
	Code    int32  `json:"code,omitempty"`
	Message string `json:"message,omitempty"`
}

type ConversationService struct {
	client  *http.Client
	baseUrl string
}

func NewConversationService(client *http.Client, baseUrl string) *ConversationService {
	return &ConversationService{
		client:  client,
		baseUrl: baseUrl,
	}
}

func (s *ConversationService) All(in *Conversation_AllRequest) (out *Conversation_AllResponse, resp *http.Response, err error) {
	v := url.Values{}
	v.Add("Take", strconv.FormatUint(uint64(in.Take), 10))
	v.Add("Skip", strconv.FormatUint(uint64(in.Skip), 10))
	req, err := http.NewRequest("GET", s.baseUrl+"/Conversation/All?"+v.Encode(), nil)
	if err != nil {
		return
	}
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Conversation_AllResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *ConversationService) GetMessage(in *Conversation_GetMessageRequest) (out *Conversation_GetMessageResponse, resp *http.Response, err error) {
	v := url.Values{}
	v.Add("id", strconv.FormatUint(uint64(in.Id), 10))
	v.Add("skipTill", strconv.FormatInt(int64(in.SkipTill), 10))
	v.Add("take", strconv.FormatUint(uint64(in.Take), 10))
	req, err := http.NewRequest("GET", s.baseUrl+"/Conversation/GetMessage?"+v.Encode(), nil)
	if err != nil {
		return
	}
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Conversation_GetMessageResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *ConversationService) SendMessage(in *Conversation_SendMessageRequest) (out *Conversation_SendMessageResponse, resp *http.Response, err error) {
	v := url.Values{}
	v.Add("Id", strconv.FormatUint(uint64(in.Id), 10))
	v.Add("Content", in.Content)
	for _, v1 := range in.At {
		v.Add("At", v1)
	}
	req, err := http.NewRequest("POST", s.baseUrl+"/Conversation/SendMessage", strings.NewReader(v.Encode()))
	if err != nil {
		return
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Conversation_SendMessageResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *ConversationService) ConversationDetail(in *Conversation_ConversationDetailRequest) (out *Conversation_ConversationDetailResponse, resp *http.Response, err error) {
	v := url.Values{}
	v.Add("id", strconv.FormatUint(uint64(in.Id), 10))
	req, err := http.NewRequest("GET", s.baseUrl+"/Conversation/ConversationDetail?"+v.Encode(), nil)
	if err != nil {
		return
	}
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Conversation_ConversationDetailResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *ConversationService) UpdateMessageLifeTime(in *Conversation_UpdateMessageLifeTimeRequest) (out *Conversation_UpdateMessageLifeTimeResponse, resp *http.Response, err error) {
	v := url.Values{}
	v.Add("Id", strconv.FormatUint(uint64(in.Id), 10))
	v.Add("NewLifeTime", strconv.FormatUint(uint64(in.NewLifeTime), 10))
	req, err := http.NewRequest("POST", s.baseUrl+"/Conversation/UpdateMessageLifeTime", strings.NewReader(v.Encode()))
	if err != nil {
		return
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Conversation_UpdateMessageLifeTimeResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}
