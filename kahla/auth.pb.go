// Code generated by go-rest-client. DO NOT EDIT.
// source: auth.proto
package kahla

import (
	"encoding/json"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

type Auth_IndexResponse struct {
	Code       int32  `json:"code,omitempty"`
	Message    string `json:"message,omitempty"`
	WikiPath   string `json:"wikiPath,omitempty"`
	ServerTime string `json:"serverTime,omitempty"`
	UtcTime    string `json:"utcTime,omitempty"`
}

type Auth_VersionResponse struct {
	Code             int32  `json:"code,omitempty"`
	Message          string `json:"message,omitempty"`
	LatestVersion    string `json:"latestVersion,omitempty"`
	LatestCLIVersion string `json:"latestCLIVersion,omitempty"`
	DownloadAddress  string `json:"downloadAddress,omitempty"`
}

type Auth_AuthByPasswordRequest struct {
	Email    string `json:"email,omitempty"`
	Password string `json:"password,omitempty"`
}

type Auth_AuthByPasswordResponse struct {
	Code    int32  `json:"code,omitempty"`
	Message string `json:"message,omitempty"`
}

type Auth_RegisterKahlaRequest struct {
	Email           string `json:"Email,omitempty"`
	Password        string `json:"Password,omitempty"`
	ConfirmPassword string `json:"ConfirmPassword,omitempty"`
}

type Auth_RegisterKahlaResponse struct {
	Code    int32  `json:"code,omitempty"`
	Message string `json:"message,omitempty"`
}

type Auth_AuthResultRequest struct {
	State string `json:"state,omitempty"`
	Code  uint32 `json:"code,omitempty"`
}

type Auth_SignInStatusResponse struct {
	Code    int32  `json:"code,omitempty"`
	Message string `json:"message,omitempty"`
	Value   bool   `json:"value,omitempty"`
}

type Auth_MeResponse struct {
	Code    int32                 `json:"code,omitempty"`
	Message string                `json:"message,omitempty"`
	Value   Auth_MeResponse_Value `json:"value,omitempty"`
}
type Auth_MeResponse_Value struct {
	AccountCreateTime       string `json:"accountCreateTime,omitempty"`
	Bio                     string `json:"bio,omitempty"`
	Email                   string `json:"email,omitempty"`
	EmailConfirmed          bool   `json:"emailConfirmed,omitempty"`
	EnableEmailNotification bool   `json:"enableEmailNotification,omitempty"`
	HeadImgFileKey          uint32 `json:"headImgFileKey,omitempty"`
	Id                      string `json:"id,omitempty"`
	MakeEmailPublic         bool   `json:"makeEmailPublic,omitempty"`
	NickName                string `json:"nickName,omitempty"`
	PreferedLanguage        string `json:"preferedLanguage,omitempty"`
	Sex                     string `json:"sex,omitempty"`
	ThemeId                 uint32 `json:"themeId,omitempty"`
}

type Auth_UpdateInfoRequest struct {
	NickName    *string `json:"NickName,omitempty"`
	Bio         *string `json:"Bio,omitempty"`
	HeadImgKey  *uint32 `json:"HeadImgKey,omitempty"`
	HideMyEmail *bool   `json:"HideMyEmail,omitempty"`
}

type Auth_UpdateInfoResponse struct {
	Code    int32  `json:"code,omitempty"`
	Message string `json:"message,omitempty"`
}

type Auth_UpdateClientSettingRequest struct {
	ThemeId                 *uint32 `json:"ThemeId,omitempty"`
	EnableEmailNotification *bool   `json:"EnableEmailNotification,omitempty"`
}

type Auth_UpdateClientSettingResponse struct {
	Code    int32  `json:"code,omitempty"`
	Message string `json:"message,omitempty"`
}

type Auth_ChangePasswordRequest struct {
	OldPassword    string `json:"OldPassword,omitempty"`
	NewPassword    string `json:"NewPassword,omitempty"`
	RepeatPassword string `json:"RepeatPassword,omitempty"`
}

type Auth_ChangePasswordResponse struct {
	Code    int32  `json:"code,omitempty"`
	Message string `json:"message,omitempty"`
}

type Auth_SendEmailRequest struct {
	Email string `json:"email,omitempty"`
}

type Auth_SendEmailResponse struct {
	Code    int32  `json:"code,omitempty"`
	Message string `json:"message,omitempty"`
}

type Auth_InitPusherResponse struct {
	Code       int32  `json:"code,omitempty"`
	Message    string `json:"message,omitempty"`
	ServerPath string `json:"serverPath,omitempty"`
	ChannelId  uint32 `json:"channelId,omitempty"`
	ConnectKey string `json:"connectKey,omitempty"`
}

type Auth_LogOffRequest struct {
	DeviceId int32 `json:"DeviceId,omitempty"`
}

type Auth_LogOffResponse struct {
	Code    int32  `json:"code,omitempty"`
	Message string `json:"message,omitempty"`
}

type AuthService struct {
	client  *http.Client
	baseUrl string
}

func NewAuthService(client *http.Client, baseUrl string) *AuthService {
	return &AuthService{
		client:  client,
		baseUrl: baseUrl,
	}
}

func (s *AuthService) Index() (out *Auth_IndexResponse, resp *http.Response, err error) {
	req, err := http.NewRequest("GET", s.baseUrl+"/Auth/Index", nil)
	if err != nil {
		return
	}
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Auth_IndexResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *AuthService) Version() (out *Auth_VersionResponse, resp *http.Response, err error) {
	req, err := http.NewRequest("GET", s.baseUrl+"/Auth/Version", nil)
	if err != nil {
		return
	}
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Auth_VersionResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *AuthService) AuthByPassword(in *Auth_AuthByPasswordRequest) (out *Auth_AuthByPasswordResponse, resp *http.Response, err error) {
	v := url.Values{}
	v.Add("email", in.Email)
	v.Add("password", in.Password)
	req, err := http.NewRequest("POST", s.baseUrl+"/Auth/AuthByPassword", strings.NewReader(v.Encode()))
	if err != nil {
		return
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Auth_AuthByPasswordResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *AuthService) RegisterKahla(in *Auth_RegisterKahlaRequest) (out *Auth_RegisterKahlaResponse, resp *http.Response, err error) {
	v := url.Values{}
	v.Add("Email", in.Email)
	v.Add("Password", in.Password)
	v.Add("ConfirmPassword", in.ConfirmPassword)
	req, err := http.NewRequest("POST", s.baseUrl+"/Auth/RegisterKahla", strings.NewReader(v.Encode()))
	if err != nil {
		return
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Auth_RegisterKahlaResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *AuthService) OAuth() (resp *http.Response, err error) {
	req, err := http.NewRequest("GET", s.baseUrl+"/Auth/OAuth", nil)
	if err != nil {
		return
	}
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	return
}

func (s *AuthService) AuthResult(in *Auth_AuthResultRequest) (resp *http.Response, err error) {
	v := url.Values{}
	v.Add("state", in.State)
	v.Add("code", strconv.FormatUint(uint64(in.Code), 10))
	req, err := http.NewRequest("GET", s.baseUrl+"/Auth/AuthResult?"+v.Encode(), nil)
	if err != nil {
		return
	}
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	return
}

func (s *AuthService) SignInStatus() (out *Auth_SignInStatusResponse, resp *http.Response, err error) {
	req, err := http.NewRequest("GET", s.baseUrl+"/Auth/SignInStatus", nil)
	if err != nil {
		return
	}
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Auth_SignInStatusResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *AuthService) Me() (out *Auth_MeResponse, resp *http.Response, err error) {
	req, err := http.NewRequest("GET", s.baseUrl+"/Auth/Me", nil)
	if err != nil {
		return
	}
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Auth_MeResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *AuthService) UpdateInfo(in *Auth_UpdateInfoRequest) (out *Auth_UpdateInfoResponse, resp *http.Response, err error) {
	v := url.Values{}
	if in.NickName != nil {
		v.Add("NickName", *in.NickName)
	}
	if in.Bio != nil {
		v.Add("Bio", *in.Bio)
	}
	if in.HeadImgKey != nil {
		v.Add("HeadImgKey", strconv.FormatUint(uint64(*in.HeadImgKey), 10))
	}
	if in.HideMyEmail != nil {
		v.Add("HideMyEmail", strconv.FormatBool(*in.HideMyEmail))
	}
	req, err := http.NewRequest("POST", s.baseUrl+"/Auth/UpdateInfo", strings.NewReader(v.Encode()))
	if err != nil {
		return
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Auth_UpdateInfoResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *AuthService) UpdateClientSetting(in *Auth_UpdateClientSettingRequest) (out *Auth_UpdateClientSettingResponse, resp *http.Response, err error) {
	v := url.Values{}
	if in.ThemeId != nil {
		v.Add("ThemeId", strconv.FormatUint(uint64(*in.ThemeId), 10))
	}
	if in.EnableEmailNotification != nil {
		v.Add("EnableEmailNotification", strconv.FormatBool(*in.EnableEmailNotification))
	}
	req, err := http.NewRequest("POST", s.baseUrl+"/Auth/UpdateClientSetting", strings.NewReader(v.Encode()))
	if err != nil {
		return
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Auth_UpdateClientSettingResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *AuthService) ChangePassword(in *Auth_ChangePasswordRequest) (out *Auth_ChangePasswordResponse, resp *http.Response, err error) {
	v := url.Values{}
	v.Add("OldPassword", in.OldPassword)
	v.Add("NewPassword", in.NewPassword)
	v.Add("RepeatPassword", in.RepeatPassword)
	req, err := http.NewRequest("POST", s.baseUrl+"/Auth/ChangePassword", strings.NewReader(v.Encode()))
	if err != nil {
		return
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Auth_ChangePasswordResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *AuthService) SendEmail(in *Auth_SendEmailRequest) (out *Auth_SendEmailResponse, resp *http.Response, err error) {
	v := url.Values{}
	v.Add("email", in.Email)
	req, err := http.NewRequest("POST", s.baseUrl+"/Auth/SendEmail", strings.NewReader(v.Encode()))
	if err != nil {
		return
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Auth_SendEmailResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *AuthService) InitPusher() (out *Auth_InitPusherResponse, resp *http.Response, err error) {
	req, err := http.NewRequest("GET", s.baseUrl+"/Auth/InitPusher", nil)
	if err != nil {
		return
	}
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Auth_InitPusherResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *AuthService) LogOff(in *Auth_LogOffRequest) (out *Auth_LogOffResponse, resp *http.Response, err error) {
	v := url.Values{}
	v.Add("DeviceId", strconv.FormatInt(int64(in.DeviceId), 10))
	req, err := http.NewRequest("GET", s.baseUrl+"/Auth/LogOff?"+v.Encode(), nil)
	if err != nil {
		return
	}
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Auth_LogOffResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}
