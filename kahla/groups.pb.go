// Code generated by go-rest-client. DO NOT EDIT.
// source: groups.proto
package kahla

import (
	"encoding/json"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

type Groups_CreateGroupConversationRequest struct {
	GroupName    string `json:"GroupName,omitempty"`
	JoinPassword string `json:"JoinPassword,omitempty"`
}

type Groups_CreateGroupConversationResponse struct {
}

type Groups_JoinGroupRequest struct {
	GroupName    string `json:"groupName,omitempty"`
	JoinPassword string `json:"joinPassword,omitempty"`
}

type Groups_JoinGroupResponse struct {
}

type Groups_TransferGroupOwnerRequest struct {
	GroupName    string `json:"groupName,omitempty"`
	TargetUserId string `json:"targetUserId,omitempty"`
}

type Groups_TransferGroupOwnerResponse struct {
}

type Groups_KickMemberRequest struct {
	GroupName    string `json:"groupName,omitempty"`
	TargetUserId string `json:"targetUserId,omitempty"`
}

type Groups_KickMemberResponse struct {
}

type Groups_LeaveGroupRequest struct {
	GroupName string `json:"groupName,omitempty"`
}

type Groups_LeaveGroupResponse struct {
}

type Groups_SetGroupMutedRequest struct {
	GroupName string `json:"groupName,omitempty"`
	SetMuted  bool   `json:"setMuted,omitempty"`
}

type Groups_SetGroupMutedResponse struct {
}

type Groups_UpdateGroupInfoRequest struct {
	GroupName string `json:"GroupName,omitempty"`
	NewName   string `json:"NewName,omitempty"`
	AvatarKey uint32 `json:"AvatarKey,omitempty"`
}

type Groups_UpdateGroupInfoResponse struct {
}

type Groups_UpdateGroupPasswordRequest struct {
	GroupName       string `json:"GroupName,omitempty"`
	NewJoinPassword string `json:"NewJoinPassword,omitempty"`
}

type Groups_UpdateGroupPasswordResponse struct {
}

type GroupsService struct {
	client  *http.Client
	baseUrl string
}

func NewGroupsService(client *http.Client, baseUrl string) *GroupsService {
	return &GroupsService{
		client:  client,
		baseUrl: baseUrl,
	}
}

func (s *GroupsService) CreateGroupConversation(in *Groups_CreateGroupConversationRequest) (out *Groups_CreateGroupConversationResponse, resp *http.Response, err error) {
	v := url.Values{}
	v.Add("GroupName", in.GroupName)
	v.Add("JoinPassword", in.JoinPassword)
	req, err := http.NewRequest("POST", s.baseUrl+"/Groups/CreateGroupConversation", strings.NewReader(v.Encode()))
	if err != nil {
		return
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Groups_CreateGroupConversationResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *GroupsService) JoinGroup(in *Groups_JoinGroupRequest) (out *Groups_JoinGroupResponse, resp *http.Response, err error) {
	v := url.Values{}
	v.Add("groupName", in.GroupName)
	v.Add("joinPassword", in.JoinPassword)
	req, err := http.NewRequest("POST", s.baseUrl+"/Groups/JoinGroup", strings.NewReader(v.Encode()))
	if err != nil {
		return
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Groups_JoinGroupResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *GroupsService) TransferGroupOwner(in *Groups_TransferGroupOwnerRequest) (out *Groups_TransferGroupOwnerResponse, resp *http.Response, err error) {
	v := url.Values{}
	v.Add("groupName", in.GroupName)
	v.Add("targetUserId", in.TargetUserId)
	req, err := http.NewRequest("POST", s.baseUrl+"/Groups/TransferGroupOwner", strings.NewReader(v.Encode()))
	if err != nil {
		return
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Groups_TransferGroupOwnerResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *GroupsService) KickMember(in *Groups_KickMemberRequest) (out *Groups_KickMemberResponse, resp *http.Response, err error) {
	v := url.Values{}
	v.Add("groupName", in.GroupName)
	v.Add("targetUserId", in.TargetUserId)
	req, err := http.NewRequest("POST", s.baseUrl+"/Groups/KickMember", strings.NewReader(v.Encode()))
	if err != nil {
		return
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Groups_KickMemberResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *GroupsService) LeaveGroup(in *Groups_LeaveGroupRequest) (out *Groups_LeaveGroupResponse, resp *http.Response, err error) {
	v := url.Values{}
	v.Add("groupName", in.GroupName)
	req, err := http.NewRequest("POST", s.baseUrl+"/Groups/LeaveGroup", strings.NewReader(v.Encode()))
	if err != nil {
		return
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Groups_LeaveGroupResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *GroupsService) SetGroupMuted(in *Groups_SetGroupMutedRequest) (out *Groups_SetGroupMutedResponse, resp *http.Response, err error) {
	v := url.Values{}
	v.Add("groupName", in.GroupName)
	v.Add("setMuted", strconv.FormatBool(in.SetMuted))
	req, err := http.NewRequest("POST", s.baseUrl+"/Groups/SetGroupMuted", strings.NewReader(v.Encode()))
	if err != nil {
		return
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Groups_SetGroupMutedResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *GroupsService) UpdateGroupInfo(in *Groups_UpdateGroupInfoRequest) (out *Groups_UpdateGroupInfoResponse, resp *http.Response, err error) {
	v := url.Values{}
	v.Add("GroupName", in.GroupName)
	v.Add("NewName", in.NewName)
	v.Add("AvatarKey", strconv.FormatUint(uint64(in.AvatarKey), 10))
	req, err := http.NewRequest("POST", s.baseUrl+"/Groups/UpdateGroupInfo", strings.NewReader(v.Encode()))
	if err != nil {
		return
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Groups_UpdateGroupInfoResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *GroupsService) UpdateGroupPassword(in *Groups_UpdateGroupPasswordRequest) (out *Groups_UpdateGroupPasswordResponse, resp *http.Response, err error) {
	v := url.Values{}
	v.Add("GroupName", in.GroupName)
	v.Add("NewJoinPassword", in.NewJoinPassword)
	req, err := http.NewRequest("POST", s.baseUrl+"/Groups/UpdateGroupPassword", strings.NewReader(v.Encode()))
	if err != nil {
		return
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Groups_UpdateGroupPasswordResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}
