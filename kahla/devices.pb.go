// Code generated by go-rest-client. DO NOT EDIT.
// source: devices.proto
package kahla

import (
	"encoding/json"
	"net/http"
	"net/url"
	"strconv"
)

type Devices_AddDeviceRequest struct {
	Name         string `json:"Name,omitempty"`
	PushEndpoint string `json:"PushEndpoint,omitempty"`
	PushP256DH   string `json:"PushP256DH,omitempty"`
	PushAuth     string `json:"PushAuth,omitempty"`
}

type Devices_AddDeviceResponse struct {
	Code    int32  `json:"code,omitempty"`
	Message string `json:"message,omitempty"`
}

type Devices_UpdateDeviceRequest struct {
	DeviceId     uint32 `json:"DeviceId,omitempty"`
	Name         string `json:"Name,omitempty"`
	PushEndpoint string `json:"PushEndpoint,omitempty"`
	PushP256DH   string `json:"PushP256DH,omitempty"`
	PushAuth     string `json:"PushAuth,omitempty"`
}

type Devices_UpdateDeviceResponse struct {
	Code    int32  `json:"code,omitempty"`
	Message string `json:"message,omitempty"`
}

type Devices_MyDevicesResponse struct {
	Code    int32                            `json:"code,omitempty"`
	Message string                           `json:"message,omitempty"`
	Items   []Devices_MyDevicesResponse_Item `json:"items,omitempty"`
}
type Devices_MyDevicesResponse_Item struct {
	Id        uint32 `json:"id,omitempty"`
	Name      string `json:"name,omitempty"`
	IpAddress string `json:"ipAddress,omitempty"`
	UserId    string `json:"userId,omitempty"`
	AddTime   string `json:"addTime,omitempty"`
}

type Devices_PushTestMessageResponse struct {
	Code    int32  `json:"code,omitempty"`
	Message string `json:"message,omitempty"`
}

type DevicesService struct {
	client  *http.Client
	baseUrl string
}

func NewDevicesService(client *http.Client, baseUrl string) *DevicesService {
	return &DevicesService{
		client:  client,
		baseUrl: baseUrl,
	}
}

func (s *DevicesService) AddDevice(in *Devices_AddDeviceRequest) (out *Devices_AddDeviceResponse, resp *http.Response, err error) {
	v := url.Values{}
	v.Add("Name", in.Name)
	v.Add("PushEndpoint", in.PushEndpoint)
	v.Add("PushP256DH", in.PushP256DH)
	v.Add("PushAuth", in.PushAuth)
	req, err := http.NewRequest("GET", s.baseUrl+"/Devices/AddDevice?"+v.Encode(), nil)
	if err != nil {
		return
	}
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Devices_AddDeviceResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *DevicesService) UpdateDevice(in *Devices_UpdateDeviceRequest) (out *Devices_UpdateDeviceResponse, resp *http.Response, err error) {
	v := url.Values{}
	v.Add("DeviceId", strconv.FormatUint(uint64(in.DeviceId), 10))
	v.Add("Name", in.Name)
	v.Add("PushEndpoint", in.PushEndpoint)
	v.Add("PushP256DH", in.PushP256DH)
	v.Add("PushAuth", in.PushAuth)
	req, err := http.NewRequest("GET", s.baseUrl+"/Devices/UpdateDevice?"+v.Encode(), nil)
	if err != nil {
		return
	}
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Devices_UpdateDeviceResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *DevicesService) MyDevices() (out *Devices_MyDevicesResponse, resp *http.Response, err error) {
	req, err := http.NewRequest("GET", s.baseUrl+"/Devices/MyDevices", nil)
	if err != nil {
		return
	}
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Devices_MyDevicesResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}

func (s *DevicesService) PushTestMessage() (out *Devices_PushTestMessageResponse, resp *http.Response, err error) {
	req, err := http.NewRequest("GET", s.baseUrl+"/Devices/PushTestMessage", nil)
	if err != nil {
		return
	}
	resp, err = s.client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	out = &Devices_PushTestMessageResponse{}
	err = json.NewDecoder(resp.Body).Decode(out)
	if err != nil {
		return
	}
	return
}
